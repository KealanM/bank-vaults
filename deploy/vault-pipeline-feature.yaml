apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-secrets
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: hello-secrets
  template:
    metadata:
      labels:
        app.kubernetes.io/name: hello-secrets
      annotations:
        vault.security.banzaicloud.io/vault-addr: "https://ec2-54-183-131-127.us-west-1.compute.amazonaws.com/vault"
        vault.security.banzaicloud.io/vault-skip-verify: "true"
        vault.security.banzaicloud.io/vault-role: "pipeline"
        vault.security.banzaicloud.io/vault-path: "kubernetes-cluster/1/4"
    spec:
      initContainers:
      - name: init-ubuntu
        image: ubuntu
        command: ["sh", "-c", "echo $AWS_SECRET_ACCESS_KEY && echo initContainers ready"]
        env:
        - name: AWS_SECRET_ACCESS_KEY
          value: vault:secret/data/orgs/1/7d1507284a5757cac6b62708a4ef00bfc5d695256489cb704f12b4b9e6255df2#type
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: alpine
        image: alpine
        command: ["sh", "-c", "echo $AWS_SECRET_ACCESS_KEY && echo going to sleep... && sleep 10000"]
        env:
        - name: AWS_SECRET_ACCESS_KEY
          value: vault:secret/data/accounts/aws#AWS_SECRET_ACCESS_KEY
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
      - name: mysql
        image: mysql # see that containers without explicit command can work
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: vault:secret/data/mysql#MYSQL_ROOT_PASSWORD
        ports:
        - name: mysql
          containerPort: 3306
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
      # imagePullSecrets:
      # - sample-secret
